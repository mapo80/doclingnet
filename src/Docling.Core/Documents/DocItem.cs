using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Docling.Core.Geometry;
using Docling.Core.Primitives;

namespace Docling.Core.Documents;

/// <summary>
/// Base type for all document items generated by the pipeline.
/// Mirrors the Python Docling item model featuring id/tags/metadata support.
/// </summary>
public abstract class DocItem
{
    private readonly Dictionary<string, object?> _metadata;
    private readonly SortedSet<string> _tags;
    private readonly ReadOnlyDictionary<string, object?> _metadataView;

    protected DocItem(
        DocItemKind kind,
        PageReference page,
        BoundingBox box,
        string? id = null,
        IEnumerable<string>? tags = null,
        IReadOnlyDictionary<string, object?>? metadata = null,
        DateTimeOffset? createdAt = null)
    {
        Kind = kind;
        Page = page;
        BoundingBox = box;
        Id = string.IsNullOrWhiteSpace(id) ? GenerateId(kind, page) : id!;
        CreatedAt = createdAt ?? DateTimeOffset.UtcNow;
        _metadata = metadata is null
            ? new Dictionary<string, object?>(StringComparer.OrdinalIgnoreCase)
            : new Dictionary<string, object?>(metadata, StringComparer.OrdinalIgnoreCase);
        _metadataView = new ReadOnlyDictionary<string, object?>(_metadata);
        _tags = new SortedSet<string>(StringComparer.OrdinalIgnoreCase);
        if (tags is not null)
        {
            foreach (var tag in tags)
            {
                AddTag(tag);
            }
        }
    }

    public string Id { get; }

    public DocItemKind Kind { get; }

    public PageReference Page { get; }

    public BoundingBox BoundingBox { get; private set; }

    public DateTimeOffset CreatedAt { get; }

    public IReadOnlyDictionary<string, object?> Metadata => _metadataView;

    public IReadOnlyCollection<string> Tags => _tags;

    public bool HasTag(string tag)
    {
        ArgumentException.ThrowIfNullOrEmpty(tag);
        return _tags.Contains(tag);
    }

    public void AddTag(string tag)
    {
        ArgumentException.ThrowIfNullOrEmpty(tag);
        _tags.Add(tag);
    }

    public bool RemoveTag(string tag)
    {
        ArgumentException.ThrowIfNullOrEmpty(tag);
        return _tags.Remove(tag);
    }

    public bool TryGetMetadata<T>(string key, out T value)
    {
        ArgumentException.ThrowIfNullOrEmpty(key);
        if (_metadata.TryGetValue(key, out var raw) && raw is T casted)
        {
            value = casted;
            return true;
        }

        value = default!;
        return false;
    }

    protected void SetMetadata<T>(string key, T value)
    {
        ArgumentException.ThrowIfNullOrEmpty(key);
        _metadata[key] = value;
    }

    protected void MergeMetadata(IEnumerable<KeyValuePair<string, object?>> metadata)
    {
        ArgumentNullException.ThrowIfNull(metadata);
        foreach (var (key, value) in metadata)
        {
            if (string.IsNullOrWhiteSpace(key))
            {
                continue;
            }

            _metadata[key] = value;
        }
    }

    protected void UpdateBoundingBox(BoundingBox box)
    {
        BoundingBox = box;
    }

    private static string GenerateId(DocItemKind kind, PageReference page)
    {
        var prefix = kind.ToString().ToUpperInvariant();
        return $"{prefix}-{page.PageNumber}-{Guid.NewGuid():N}";
    }
}
